'use client'

import { useState, useEffect } from 'react'
import { ShieldExclamationIcon, CheckCircleIcon, XCircleIcon, ExclamationTriangleIcon, CpuChipIcon } from '@heroicons/react/24/outline'

interface MalwareSample {
  id: string
  name: string
  type: 'trojan' | 'ransomware' | 'spyware' | 'worm' | 'virus'
  fileName: string
  fileSize: string
  detectionRate: number
  riskLevel: 'low' | 'medium' | 'high' | 'critical'
  behaviors: string[]
  isMalicious: boolean
  description: string
}

const malwareSamples: MalwareSample[] = [
  {
    id: '1',
    name: 'CryptoLocker',
    type: 'ransomware',
    fileName: 'invoice_2024.exe',
    fileSize: '2.3 MB',
    detectionRate: 95,
    riskLevel: 'critical',
    behaviors: ['File encryption', 'Ransom demands', 'Network communication', 'Persistence'],
    isMalicious: true,
    description: 'Ransomware that encrypts files and demands payment in cryptocurrency'
  },
  {
    id: '2',
    name: 'KeyLogger Pro',
    type: 'spyware',
    fileName: 'system_update.dll',
    fileSize: '1.8 MB',
    detectionRate: 87,
    riskLevel: 'high',
    behaviors: ['Keyboard monitoring', 'Data transmission', 'Screenshot capture'],
    isMalicious: true,
    description: 'Spyware that captures keystrokes and sends them to a remote server'
  },
  {
    id: '3',
    name: 'Fake Antivirus',
    type: 'trojan',
    fileName: 'antivirus_protection.exe',
    fileSize: '5.1 MB',
    detectionRate: 92,
    riskLevel: 'high',
    behaviors: ['Fake security alerts', 'System modification', 'Browser hijacking'],
    isMalicious: true,
    description: 'Fake antivirus software that actually contains malware'
  },
  {
    id: '4',
    name: 'Worm.Win32',
    type: 'worm',
    fileName: 'photo_viewer.jpg.exe',
    fileSize: '956 KB',
    detectionRate: 78,
    riskLevel: 'medium',
    behaviors: ['Self-replication', 'Network spreading', 'File infection'],
    isMalicious: true,
    description: 'Self-replicating malware that spreads through network shares'
  },
  {
    id: '5',
    name: 'Calculator App',
    type: 'trojan',
    fileName: 'calculator.exe',
    fileSize: '245 KB',
    detectionRate: 15,
    riskLevel: 'low',
    behaviors: ['Basic file operations'],
    isMalicious: false,
    description: 'Legitimate calculator application with no malicious behavior'
  }
]

export function MalwareSimulation() {
  const [currentSample, setCurrentSample] = useState<MalwareSample>(malwareSamples[0])
  const [scanProgress, setScanProgress] = useState(0)
  const [scanResults, setScanResults] = useState<any>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [userDecisions, setUserDecisions] = useState<{[key: string]: 'quarantine' | 'delete' | 'allow'}>({})
  const [score, setScore] = useState(0)
  const [completedSamples, setCompletedSamples] = useState<string[]>([])

  const startScan = async () => {
    setIsScanning(true)
    setScanProgress(0)
    setScanResults(null)

    // Simulate scanning phases
    const phases = [
      { name: 'File analysis', duration: 1000 },
      { name: 'Behavior monitoring', duration: 1500 },
      { name: 'Signature checking', duration: 800 },
      { name: 'Heuristic analysis', duration: 1200 },
      { name: 'Network check', duration: 600 }
    ]

    let totalProgress = 0

    for (const phase of phases) {
      await new Promise(resolve => setTimeout(resolve, phase.duration))
      totalProgress += phase.duration / 50
      setScanProgress(Math.min(totalProgress, 95))
    }

    // Generate scan results
    setTimeout(() => {
      const results = {
        fileHash: 'a1b2c3d4e5f6...',
        signatures: currentSample.isMalicious ? ['MALWARE_FOUND', 'HIGH_RISK'] : [],
        behaviors: currentSample.behaviors,
        riskScore: currentSample.detectionRate,
        recommendation: currentSample.isMalicious ? 'Quarantine' : 'Safe'
      }
      setScanResults(results)
      setScanProgress(100)
      setIsScanning(false)
    }, 500)
  }

  const handleDecision = (decision: 'quarantine' | 'delete' | 'allow') => {
    if (!scanResults) return

    const newDecisions = { ...userDecisions, [currentSample.id]: decision }
    setUserDecisions(newDecisions)

    // Calculate score
    let points = 0
    if (currentSample.isMalicious) {
      if (decision === 'quarantine' || decision === 'delete') {
        points = 10
      }
    } else {
      if (decision === 'allow') {
        points = 10
      } else {
        points = -5 // Wrong decision for safe file
      }
    }

    setScore(prev => prev + points)
    setCompletedSamples(prev => [...prev, currentSample.id])
  }

  const nextSample = () => {
    const remainingSamples = malwareSamples.filter(sample => !completedSamples.includes(sample.id))
    if (remainingSamples.length > 0) {
      setCurrentSample(remainingSamples[0])
    } else {
      // Reset for another round
      setCompletedSamples([])
      setCurrentSample(malwareSamples[0])
    }
    setScanResults(null)
    setScanProgress(0)
    setIsScanning(false)
  }

  const resetSimulation = () => {
    setCurrentSample(malwareSamples[0])
    setScanResults(null)
    setScanProgress(0)
    setIsScanning(false)
    setUserDecisions({})
    setScore(0)
    setCompletedSamples([])
  }

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'critical': return 'text-cyber-red-400'
      case 'high': return 'text-orange-400'
      case 'medium': return 'text-yellow-400'
      case 'low': return 'text-cyber-green-400'
      default: return 'text-cyber-gray-400'
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="cyber-card">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <ShieldExclamationIcon className="h-6 w-6 text-cyber-red-500 mr-3" />
            <div>
              <h3 className="text-xl font-semibold text-white">Malware Defense Simulation</h3>
              <p className="text-sm text-cyber-gray-400">Learn to identify and handle malware threats</p>
            </div>
          </div>
          <div className="text-right">
            <div className={`text-2xl font-bold ${score >= 30 ? 'text-cyber-green-400' : score >= 20 ? 'text-yellow-400' : 'text-cyber-red-400'}`}>
              {score}/{malwareSamples.length * 10}
            </div>
            <div className="text-xs text-cyber-gray-400">Score</div>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <div className="text-sm text-cyber-gray-400">
            Sample {completedSamples.length + 1} of {malwareSamples.length}
          </div>
          <button
            onClick={resetSimulation}
            className="text-cyber-gray-400 hover:text-white text-sm"
          >
            Reset
          </button>
        </div>
      </div>

      {/* File Information */}
      <div className="cyber-card">
        <h4 className="text-lg font-semibold text-white mb-4">Suspicious File Detected</h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-white mb-2">File Details</h5>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-cyber-gray-400">Name:</span>
                  <span className="text-white font-mono">{currentSample.fileName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-gray-400">Size:</span>
                  <span className="text-white">{currentSample.fileSize}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-gray-400">Type:</span>
                  <span className="text-cyber-purple-400 capitalize">{currentSample.type}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-gray-400">Risk:</span>
                  <span className={`font-medium ${getRiskColor(currentSample.riskLevel)}`}>
                    {currentSample.riskLevel.toUpperCase()}
                  </span>
                </div>
              </div>
            </div>

            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-white mb-2">Detected Behaviors</h5>
              <div className="flex flex-wrap gap-2">
                {currentSample.behaviors.map((behavior, index) => (
                  <span
                    key={index}
                    className="text-xs bg-cyber-red-500/20 text-cyber-red-400 px-2 py-1 rounded"
                  >
                    {behavior}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <div className="bg-cyber-gray-200/20 rounded p-4">
            <h5 className="font-medium text-white mb-2">Description</h5>
            <p className="text-sm text-cyber-gray-400">{currentSample.description}</p>
          </div>
        </div>
      </div>

      {/* Scan Interface */}
      <div className="cyber-card">
        <h4 className="text-lg font-semibold text-white mb-4">Security Scan</h4>

        {!isScanning && !scanResults && (
          <button
            onClick={startScan}
            className="cyber-button w-full"
          >
            <CpuChipIcon className="h-4 w-4 mr-2" />
            Start Deep Scan
          </button>
        )}

        {isScanning && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-cyber-gray-400">Scanning file...</span>
              <span className="text-cyber-green-400">{scanProgress}%</span>
            </div>
            <div className="w-full bg-cyber-gray-200 rounded-full h-2">
              <div
                className="bg-cyber-green-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${scanProgress}%` }}
              />
            </div>
            <div className="text-center text-sm text-cyber-gray-400">
              Analyzing file signatures and behaviors...
            </div>
          </div>
        )}

        {scanResults && (
          <div className="space-y-4">
            <div className={`p-4 rounded-lg border ${
              scanResults.signatures.length > 0
                ? 'bg-cyber-red-500/10 border-cyber-red-500/30'
                : 'bg-cyber-green-500/10 border-cyber-green-500/30'
            }`}>
              <div className="flex items-center mb-3">
                {scanResults.signatures.length > 0 ? (
                  <ExclamationTriangleIcon className="h-6 w-6 text-cyber-red-500 mr-3" />
                ) : (
                  <CheckCircleIcon className="h-6 w-6 text-cyber-green-500 mr-3" />
                )}
                <div>
                  <h5 className={`font-medium ${
                    scanResults.signatures.length > 0 ? 'text-cyber-red-400' : 'text-cyber-green-400'
                  }`}>
                    {scanResults.signatures.length > 0 ? 'Threat Detected!' : 'File is Safe'}
                  </h5>
                  <p className="text-sm text-cyber-gray-400">
                    Risk Score: {scanResults.riskScore}% | Recommendation: {scanResults.recommendation}
                  </p>
                </div>
              </div>

              {scanResults.signatures.length > 0 && (
                <div className="mb-4">
                  <h6 className="text-sm font-medium text-cyber-red-400 mb-2">Detected Threats:</h6>
                  <div className="flex flex-wrap gap-2">
                    {scanResults.signatures.map((signature: string, index: number) => (
                      <span
                        key={index}
                        className="text-xs bg-cyber-red-500/20 text-cyber-red-400 px-2 py-1 rounded"
                      >
                        {signature}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {!userDecisions[currentSample.id] ? (
              <div className="space-y-3">
                <h5 className="font-medium text-white">Choose Action:</h5>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <button
                    onClick={() => handleDecision('quarantine')}
                    className="cyber-button"
                  >
                    🛡️ Quarantine
                  </button>
                  <button
                    onClick={() => handleDecision('delete')}
                    className="cyber-button-danger"
                  >
                    🗑️ Delete File
                  </button>
                  <button
                    onClick={() => handleDecision('allow')}
                    className="cyber-button"
                  >
                    ✅ Allow
                  </button>
                </div>
              </div>
            ) : (
              <div className="bg-cyber-blue-500/10 border border-cyber-blue-500/30 rounded p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h5 className="font-medium text-cyber-blue-400">Decision Made</h5>
                    <p className="text-sm text-cyber-gray-400">
                      You chose to: <span className="font-medium">{userDecisions[currentSample.id]}</span>
                    </p>
                  </div>
                  <button
                    onClick={nextSample}
                    className="cyber-button"
                  >
                    Next Sample
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Malware Education */}
      <div className="cyber-card">
        <h4 className="text-lg font-semibold text-white mb-4">Malware Types & Protection</h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-cyber-red-400 mb-2">🦠 Viruses</h5>
              <p className="text-sm text-cyber-gray-400">
                Attach to legitimate files and spread when executed. Require user interaction.
              </p>
            </div>

            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-cyber-purple-400 mb-2">🐛 Worms</h5>
              <p className="text-sm text-cyber-gray-400">
                Self-replicating malware that spreads through networks without user action.
              </p>
            </div>

            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-orange-400 mb-2">💰 Ransomware</h5>
              <p className="text-sm text-cyber-gray-400">
                Encrypts files and demands payment for decryption key.
              </p>
            </div>
          </div>

          <div className="space-y-4">
            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-yellow-400 mb-2">🐎 Trojans</h5>
              <p className="text-sm text-cyber-gray-400">
                Disguise themselves as legitimate software but contain malicious code.
              </p>
            </div>

            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-cyber-blue-400 mb-2">👁️ Spyware</h5>
              <p className="text-sm text-cyber-gray-400">
                Secretly monitors and collects user information and activities.
              </p>
            </div>

            <div className="bg-cyber-gray-200/20 rounded p-4">
              <h5 className="font-medium text-cyber-green-400 mb-2">🛡️ Protection Tips</h5>
              <ul className="text-sm text-cyber-gray-400 space-y-1">
                <li>• Keep antivirus updated</li>
                <li>• Don&apos;t open unknown attachments</li>
                <li>• Regular system scans</li>
                <li>• Use firewall protection</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
